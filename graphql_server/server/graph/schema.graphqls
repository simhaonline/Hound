enum Status{
  SUCCESS
  FAILED
}

# Same as specified in rest server
type User {
  firstName: String!
  lastName:  String!
  email:     String!
  id: Int!
}

# Postgres date time

scalar DateTime

union Auction = ScheduledAuction | OpenAuction | ClosedAuction

type ScheduledAuction{
  property:   Property!
  min_price:  Int!
  start_time: DateTime!
  end_time:   DateTime!
}

type OpenAuction {
  property:   Property!
  bids:       [Bid!]!
  start_time: DateTime!
  end_time:   DateTime!
}

type ClosedAuction {
  property:   Property!
  bids:       [Bid!]!
  start_time: DateTime!
  end_time:   DateTime!
}

type Bid {
  bidder: User!
  amount: Int!
  time:   DateTime!
}

enum SellingType {
  AuctionedProperty
  ListingProperty
}


type Property {
  seller: User!
  sellType: SellingType!
  propertyType: [String!]!
  description: String!
  photos_url:[String!]! # Multiples photos in each bucket
  location: Location!
  rooms: Int!
  bathrooms: Int!
  area: Int!
  garage: Int!
  sold: Boolean
}

type Location {
  address: String!
  lat: Int!
  long: Int!
}
type Query {
  #users:      [User!]!
  properties: [Property!]!
}

type Mutation {
  # auth user
  signUp(firstName:String,lastName: String, password:String,email:String): Status
  login(email: String, password: String): ID
  logout(token:String): Status
  # # house offers
  # createHouseOffer(token: String!,price:Float,rooms:Int,bathrooms:Int,areasqm:Int,address:String): Status
}